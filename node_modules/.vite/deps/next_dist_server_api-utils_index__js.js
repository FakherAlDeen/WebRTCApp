import {
  __commonJS
} from "./chunk-FAW2VN4A.js";

// node_modules/next/dist/compiled/cookie/index.js
var require_cookie = __commonJS({
  "node_modules/next/dist/compiled/cookie/index.js"(exports, module) {
    (() => {
      "use strict";
      if (typeof __nccwpck_require__ !== "undefined")
        __nccwpck_require__.ab = __dirname + "/";
      var e = {};
      (() => {
        var r = e;
        r.parse = parse;
        r.serialize = serialize;
        var i = decodeURIComponent;
        var t = encodeURIComponent;
        var a = /; */;
        var n = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
        function parse(e2, r2) {
          if (typeof e2 !== "string") {
            throw new TypeError("argument str must be a string");
          }
          var t2 = {};
          var n2 = r2 || {};
          var o = e2.split(a);
          var s = n2.decode || i;
          for (var p = 0; p < o.length; p++) {
            var f = o[p];
            var u = f.indexOf("=");
            if (u < 0) {
              continue;
            }
            var v = f.substr(0, u).trim();
            var c = f.substr(++u, f.length).trim();
            if ('"' == c[0]) {
              c = c.slice(1, -1);
            }
            if (void 0 == t2[v]) {
              t2[v] = tryDecode(c, s);
            }
          }
          return t2;
        }
        function serialize(e2, r2, i2) {
          var a2 = i2 || {};
          var o = a2.encode || t;
          if (typeof o !== "function") {
            throw new TypeError("option encode is invalid");
          }
          if (!n.test(e2)) {
            throw new TypeError("argument name is invalid");
          }
          var s = o(r2);
          if (s && !n.test(s)) {
            throw new TypeError("argument val is invalid");
          }
          var p = e2 + "=" + s;
          if (null != a2.maxAge) {
            var f = a2.maxAge - 0;
            if (isNaN(f) || !isFinite(f)) {
              throw new TypeError("option maxAge is invalid");
            }
            p += "; Max-Age=" + Math.floor(f);
          }
          if (a2.domain) {
            if (!n.test(a2.domain)) {
              throw new TypeError("option domain is invalid");
            }
            p += "; Domain=" + a2.domain;
          }
          if (a2.path) {
            if (!n.test(a2.path)) {
              throw new TypeError("option path is invalid");
            }
            p += "; Path=" + a2.path;
          }
          if (a2.expires) {
            if (typeof a2.expires.toUTCString !== "function") {
              throw new TypeError("option expires is invalid");
            }
            p += "; Expires=" + a2.expires.toUTCString();
          }
          if (a2.httpOnly) {
            p += "; HttpOnly";
          }
          if (a2.secure) {
            p += "; Secure";
          }
          if (a2.sameSite) {
            var u = typeof a2.sameSite === "string" ? a2.sameSite.toLowerCase() : a2.sameSite;
            switch (u) {
              case true:
                p += "; SameSite=Strict";
                break;
              case "lax":
                p += "; SameSite=Lax";
                break;
              case "strict":
                p += "; SameSite=Strict";
                break;
              case "none":
                p += "; SameSite=None";
                break;
              default:
                throw new TypeError("option sameSite is invalid");
            }
          }
          return p;
        }
        function tryDecode(e2, r2) {
          try {
            return r2(e2);
          } catch (r3) {
            return e2;
          }
        }
      })();
      module.exports = e;
    })();
  }
});

// node_modules/next/dist/server/api-utils/index.js
var require_api_utils = __commonJS({
  "node_modules/next/dist/server/api-utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getCookieParser = getCookieParser;
    exports.sendStatusCode = sendStatusCode;
    exports.redirect = redirect;
    exports.checkIsManualRevalidate = checkIsManualRevalidate;
    exports.clearPreviewData = clearPreviewData;
    exports.sendError = sendError;
    exports.setLazyProp = setLazyProp;
    exports.SYMBOL_CLEARED_COOKIES = exports.SYMBOL_PREVIEW_DATA = exports.RESPONSE_LIMIT_DEFAULT = exports.COOKIE_NAME_PRERENDER_DATA = exports.COOKIE_NAME_PRERENDER_BYPASS = exports.PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER = exports.PRERENDER_REVALIDATE_HEADER = void 0;
    function getCookieParser(headers) {
      return function parseCookie() {
        const header = headers.cookie;
        if (!header) {
          return {};
        }
        const { parse: parseCookieFn } = require_cookie();
        return parseCookieFn(Array.isArray(header) ? header.join(";") : header);
      };
    }
    function sendStatusCode(res, statusCode) {
      res.statusCode = statusCode;
      return res;
    }
    function redirect(res, statusOrUrl, url) {
      if (typeof statusOrUrl === "string") {
        url = statusOrUrl;
        statusOrUrl = 307;
      }
      if (typeof statusOrUrl !== "number" || typeof url !== "string") {
        throw new Error(`Invalid redirect arguments. Please use a single argument URL, e.g. res.redirect('/destination') or use a status code and URL, e.g. res.redirect(307, '/destination').`);
      }
      res.writeHead(statusOrUrl, {
        Location: url
      });
      res.write(url);
      res.end();
      return res;
    }
    var PRERENDER_REVALIDATE_HEADER = "x-prerender-revalidate";
    exports.PRERENDER_REVALIDATE_HEADER = PRERENDER_REVALIDATE_HEADER;
    var PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER = "x-prerender-revalidate-if-generated";
    exports.PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER = PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER;
    function checkIsManualRevalidate(req, previewProps) {
      return {
        isManualRevalidate: req.headers[PRERENDER_REVALIDATE_HEADER] === previewProps.previewModeId,
        revalidateOnlyGenerated: !!req.headers[PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER]
      };
    }
    var COOKIE_NAME_PRERENDER_BYPASS = `__prerender_bypass`;
    exports.COOKIE_NAME_PRERENDER_BYPASS = COOKIE_NAME_PRERENDER_BYPASS;
    var COOKIE_NAME_PRERENDER_DATA = `__next_preview_data`;
    exports.COOKIE_NAME_PRERENDER_DATA = COOKIE_NAME_PRERENDER_DATA;
    var RESPONSE_LIMIT_DEFAULT = 4 * 1024 * 1024;
    exports.RESPONSE_LIMIT_DEFAULT = RESPONSE_LIMIT_DEFAULT;
    var SYMBOL_PREVIEW_DATA = Symbol(COOKIE_NAME_PRERENDER_DATA);
    exports.SYMBOL_PREVIEW_DATA = SYMBOL_PREVIEW_DATA;
    var SYMBOL_CLEARED_COOKIES = Symbol(COOKIE_NAME_PRERENDER_BYPASS);
    exports.SYMBOL_CLEARED_COOKIES = SYMBOL_CLEARED_COOKIES;
    function clearPreviewData(res) {
      if (SYMBOL_CLEARED_COOKIES in res) {
        return res;
      }
      const { serialize } = require_cookie();
      const previous = res.getHeader("Set-Cookie");
      res.setHeader(`Set-Cookie`, [
        ...typeof previous === "string" ? [
          previous
        ] : Array.isArray(previous) ? previous : [],
        serialize(COOKIE_NAME_PRERENDER_BYPASS, "", {
          expires: new Date(0),
          httpOnly: true,
          sameSite: false ? "none" : "lax",
          secure: false,
          path: "/"
        }),
        serialize(COOKIE_NAME_PRERENDER_DATA, "", {
          expires: new Date(0),
          httpOnly: true,
          sameSite: false ? "none" : "lax",
          secure: false,
          path: "/"
        })
      ]);
      Object.defineProperty(res, SYMBOL_CLEARED_COOKIES, {
        value: true,
        enumerable: false
      });
      return res;
    }
    var ApiError = class extends Error {
      constructor(statusCode, message) {
        super(message);
        this.statusCode = statusCode;
      }
    };
    exports.ApiError = ApiError;
    function sendError(res, statusCode, message) {
      res.statusCode = statusCode;
      res.statusMessage = message;
      res.end(message);
    }
    function setLazyProp({ req }, prop, getter) {
      const opts = {
        configurable: true,
        enumerable: true
      };
      const optsReset = {
        ...opts,
        writable: true
      };
      Object.defineProperty(req, prop, {
        ...opts,
        get: () => {
          const value = getter();
          Object.defineProperty(req, prop, {
            ...optsReset,
            value
          });
          return value;
        },
        set: (value) => {
          Object.defineProperty(req, prop, {
            ...optsReset,
            value
          });
        }
      });
    }
  }
});

// dep:next_dist_server_api-utils_index__js
var next_dist_server_api_utils_index_js_default = require_api_utils();
export {
  next_dist_server_api_utils_index_js_default as default
};
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
//# sourceMappingURL=next_dist_server_api-utils_index__js.js.map
